trigger: none

parameters:
  - name: agentPool
    type: string
    default: 'ubuntu-latest'
  - name: agent
    type: string
    default: 'default'
  - name: azureSubscription
    type: string
    default: 'add a valid service connection so that the pipeline can pass validations and then it can be overwritten' 
  - name: appName
    type: string
    default: 'default'
  - name: resourceGroup
    type: string
    default: 'default'

variables:
  packagePath: '$(System.DefaultWorkingDirectory)/**/*.zip'
  _agentPool: ${{ parameters.agentPool }}
  _agent: ${{ parameters.agent }}
  _azSub: ${{ parameters.azureSubscription }}
  
pool:
    name: $(_agentPool)
    demands:
    - agent.name -equals $(_agent)

steps:
# Install the .NET Core SDK
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '6.x'  # Specify the .NET SDK version you need
    installationPath: $(Agent.ToolsDirectory)/dotnet

# Restore NuGet packages
- task: DotNetCoreCLI@2
  inputs:
    command: 'restore'
    projects: '**/*.csproj'

# Build the project
- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--configuration Release'

# Publish the project to a zip file
- task: DotNetCoreCLI@2
  inputs:
    command: 'publish'
    publishWebProjects: false
    projects: '**/*.csproj'
    arguments: '--configuration Release --output $(build.artifactStagingDirectory)'
    zipAfterPublish: true

# Deploy the Azure Function
- task: AzureFunctionApp@1
  displayName: 'Azure functions app deploy'
  inputs:
    azureSubscription: '$(_azSub)'
    appType: 'functionApp'
    appName: ${{ parameters.appName }}
    package: '$(build.artifactStagingDirectory)/*.zip'
    runtimeStack: 'DOTNET|6.0'  # Update according to your function's runtime stack
